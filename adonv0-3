bl_info = {
    "name": "Addon-construccionesParametricas",
    "description": "este Addon va orientado a la creacion de edificaciones parametricas con tematica principalmente medieval",
    "author": "Manuel Santos",
    "version": (0, 3, 2),
    "blender": (3, 4, 0),
    "location": "View3D > Tool",
    "warning": "",
    "wiki_url": "",
    "tracker_url": "",
    "category": "Add Mesh"
}

import bpy
from bpy.props import StringProperty, EnumProperty, PointerProperty
from bpy.types import Panel, Operator, PropertyGroup
import os



def castleOptions(self, context):
    obj = context.active_object
    if obj and "castillo" in obj.name:
        if self.enum_teja == "OPCION1":
            bpy.data.node_groups["GeometryNodes"].inputs[4].hide_value = False,
            obj.modifiers["GeometryNodes"]["Input_12"] = 0,
            bpy.data.node_groups["GeometryNodes"].inputs[4].hide_value = True

        elif self.enum_teja == "OPCION2":
            bpy.data.node_groups["GeometryNodes"].inputs[4].hide_value = False,
            obj.modifiers["GeometryNodes"]["Input_12"] = 0.01,
            bpy.data.node_groups["Nodos de geometría.001"].inputs[4].hide_value = True


class ColorGrass():
    selectedOption = 0

    def grassOptions(self, context):
        if self.grassType == "OPCION1":
            ColorGrass.selectedOption = 1
            print("opcion 1")
        elif self.grassType == "OPCION2":
            ColorGrass.selectedOption = 2
            print("opcion 2")
        elif self.grassType == "OPCION3":
            ColorGrass.selectedOption = 3
            print("opcion 3")
            

class ImportCastillo(bpy.types.Operator):
    bl_idname = "object.import_castillo"
    bl_label = "Import Castillo"
    
    def execute(self, context):
        # Librarty route
        library_path = bpy.context.scene.import_tool.importPath + "/castillo_v2.1.blend"
        
        # Name of the import object
        object_name = 'castillo'

        # uptolad the library
        with bpy.data.libraries.load(library_path) as (data_from, data_to):
            # Copy the object to the curent scene
            data_to.objects = [name for name in data_from.objects if name.startswith(object_name)]

        # Put the imported object in the curent scene
        for obj in data_to.objects:
            bpy.context.scene.collection.objects.link(obj)

        return {'FINISHED'}
    
class PutGrass(bpy.types.Operator):
    bl_idname = "object.import_grass_mod"
    bl_label = "Import GrasMod"

    def execute(self, context):
        selected_object = context.active_object

        # library route
        library_path = bpy.context.scene.import_tool.importPath + "/castillo_v2.1.blend"

        modifier_name = 'GrassGreenFloor'

        if ColorGrass.selectedOption == 1:
            modifier_name = "GrassGreenFloor"
        elif ColorGrass.selectedOption == 2:
            modifier_name = "GrassReedFloor"
        else:
            modifier_name = "GrassBlueFloor"
        
        
        
        # uptolad the library
        with bpy.data.libraries.load(library_path) as (data_from, data_to):
            # Copy the object to the curent scene
            data_to.objects = [name for name in data_from.objects if name.startswith(modifier_name)]

        # Put the imported object in the curent scene
        for obj in data_to.objects:
            bpy.context.scene.collection.objects.link(obj)
            
            
            
        
        modifier = None
        for obj in data_to.objects:
            for mod in obj.modifiers:
                if mod.name == modifier_name:
                    modifier = mod
                    break
            if modifier:
                break
        
        if modifier:    
            # append the mod
            selected_object.modifiers.append(modifier)
        else:
            print("No se pudo encontrar el modificador {modifier_name} en la biblioteca.")
        
        # select the source object
        source_obj = bpy.data.objects[modifier_name]
        
       # Copiar los modificadores
        for modifier in source_obj.modifiers:
            new_modifier = selected_object.modifiers.new(name=modifier.name, type=modifier.type)
            for attr in dir(modifier):
                if not attr.startswith('__'):
                    try:
                        setattr(new_modifier, attr, getattr(modifier, attr))
                    except AttributeError:
                        # Opción 1: Ignorar atributos de solo lectura
                        pass
        
        
        # Borrar el objeto
        bpy.data.objects.remove(source_obj, do_unlink=True)
        
        return {'FINISHED'}



class EIProperties(PropertyGroup):

    def GetLayamaCollections(self, context):
        camNames = []
        camNames.append("Scene Collection")
        for collection in bpy.data.collections:
            camNames.append(collection.name)
        collectionNames = [(name, "CAMERAS FROM: " + name, "")
                           for name in camNames]
        return collectionNames

    importPath: StringProperty(
        name="Output path",
        description="Choose a path to be used as render and .lym file output.",
        default=os.path.expanduser('~\\Documents\\'),
        maxlen=1024,
        subtype='DIR_PATH'
    )


class Panel1(bpy.types.Panel):
    bl_label = "Generar Construcciones"
    bl_idname = "PT_TestPanel"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "Addon Parametrico"
    
    def draw(self, context):
        layout = self.layout
        scene = context.scene
        importTool = scene.import_tool
        
        #print("hola")
        row = layout.row()
        layout.prop(importTool, "importPath")    
        
        
        row = layout.row()
        row.label(text= "hola", icon= "FUND")
        
        row = layout.row()
        row.label(text= "Castillo", icon= "HOME")

        #row = layout.row()
        row.operator(ImportCastillo.bl_idname, text="Import Castillo")
        
        #color Grass options
        row = layout.row()
        row.prop(context.scene, "grassType", text="Select grass color")

        row = layout.row()
        row.label(text= "Grass", icon= "GEOMETRY_NODES")
        row.operator(PutGrass.bl_idname, text="Put Grass")
        
        obj = context.active_object
        if obj:
            row = layout.row()
            row.label(text=f"Selected Object: {obj.name}")
        else:
            row = layout.row()
            row.label(text="No object selected")
        
        if "castillo" in obj.name:
            row = layout.row()
            row.label(text=f"Nombre: {obj.name}")
            row = layout.row()
            #row.label(text="tipo de tejas")
            row.prop(context.scene, "enum_teja", text="Select grass color")
        else:
            row = layout.row()
            row.label(text="No object selected")
            
            
classes = (
    EIProperties,
    ImportCastillo,
    PutGrass,
    Panel1
    )
            

        
def register():
    from bpy.utils import register_class
    for cls in classes:
        register_class(cls)
    bpy.types.Scene.import_tool = PointerProperty(type=EIProperties)
    
    #bpy.utils.register_class(Panel1)
    #bpy.utils.register_class(AparicionOperator)
    bpy.types.Scene.enum_teja = bpy.props.EnumProperty(
        items=[
            ("OPCION1", "Opción 1", "bpy.context.object.modifiers['GeometryNodes']['Input_12'] = 0"),
            ("OPCION2", "Opción 2", "bpy.context.object.modifiers['GeometryNodes']['Input_12'] = 0.01")
        ],
        update=castleOptions
    )
    bpy.types.Scene.grassType = bpy.props.EnumProperty(
        items=[
            ("OPCION1", "Green", "Green grass"),
            ("OPCION2", "Red", "Red grass"),
            ("OPCION3", "Blue", "Blue grass")
        ],
        update=ColorGrass.grassOptions
    )
    
def unregister():
    from bpy.utils import unregister_class
    for cls in reversed(classes):
        unregister_class(cls)
    del bpy.types.Scene.import_tool
    
    #bpy.utils.unregister_class(Panel1)
    #bpy.utils.unregister_class(AparicionOperator)
    del bpy.types.Scene.my_enum
    
if __name__ == "__main__":
    register() 
